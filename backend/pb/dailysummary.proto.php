<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('dailysummary.proto.php');

namespace data {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufMessage;

  require_once('types.proto.php');

  // message data.PbActivityGoalSummary
  final class PbActivityGoalSummary extends ProtobufMessage {

    private $_unknown;
    private $activityGoal = null; // required float activity_goal = 1
    private $achievedActivity = null; // required float achieved_activity = 2
    private $timeToGoUp = null; // optional .PbDuration time_to_go_up = 3
    private $timeToGoWalk = null; // optional .PbDuration time_to_go_walk = 4
    private $timeToGoJog = null; // optional .PbDuration time_to_go_jog = 5

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = \ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // required float activity_goal = 1
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->activityGoal = $tmp;

            break;
          case 2: // required float achieved_activity = 2
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->achievedActivity = $tmp;

            break;
          case 3: // optional .PbDuration time_to_go_up = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeToGoUp = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 4: // optional .PbDuration time_to_go_walk = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeToGoWalk = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 5: // optional .PbDuration time_to_go_jog = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeToGoJog = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
      if (!$this->validate()) throw new \Exception('Required fields are missing');
    }

    public function write($fp) {
      if (!$this->validate())
        throw new \Exception('Required fields are missing');
      if (!is_null($this->activityGoal)) {
        fwrite($fp, "\x0d", 1);
        Protobuf::write_float($fp, $this->activityGoal);
      }
      if (!is_null($this->achievedActivity)) {
        fwrite($fp, "\x15", 1);
        Protobuf::write_float($fp, $this->achievedActivity);
      }
      if (!is_null($this->timeToGoUp)) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->timeToGoUp->size());
        $this->timeToGoUp->write($fp);
      }
      if (!is_null($this->timeToGoWalk)) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->timeToGoWalk->size());
        $this->timeToGoWalk->write($fp);
      }
      if (!is_null($this->timeToGoJog)) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $this->timeToGoJog->size());
        $this->timeToGoJog->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if (!is_null($this->activityGoal)) {
        $size += 5;
      }
      if (!is_null($this->achievedActivity)) {
        $size += 5;
      }
      if (!is_null($this->timeToGoUp)) {
        $l = $this->timeToGoUp->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeToGoWalk)) {
        $l = $this->timeToGoWalk->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeToGoJog)) {
        $l = $this->timeToGoJog->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function validate() {
      if ($this->activityGoal === null) return false;
      if ($this->achievedActivity === null) return false;
      return true;
    }

    public function clearActivityGoal() { $this->activityGoal = null; }
    public function hasActivityGoal() { return $this->activityGoal !== null; }
    public function getActivityGoal() { if($this->activityGoal !== null) return $this->activityGoal; else return 0;}
    public function setActivityGoal($value) { $this->activityGoal = $value; }

    public function clearAchievedActivity() { $this->achievedActivity = null; }
    public function hasAchievedActivity() { return $this->achievedActivity !== null; }
    public function getAchievedActivity() { if($this->achievedActivity !== null) return $this->achievedActivity; else return 0;}
    public function setAchievedActivity($value) { $this->achievedActivity = $value; }

    public function clearTimeToGoUp() { $this->timeToGoUp = null; }
    public function hasTimeToGoUp() { return $this->timeToGoUp !== null; }
    public function getTimeToGoUp() { if($this->timeToGoUp !== null) return $this->timeToGoUp; else return null;}
    public function setTimeToGoUp(PbDuration $value) { $this->timeToGoUp = $value; }

    public function clearTimeToGoWalk() { $this->timeToGoWalk = null; }
    public function hasTimeToGoWalk() { return $this->timeToGoWalk !== null; }
    public function getTimeToGoWalk() { if($this->timeToGoWalk !== null) return $this->timeToGoWalk; else return null;}
    public function setTimeToGoWalk(PbDuration $value) { $this->timeToGoWalk = $value; }

    public function clearTimeToGoJog() { $this->timeToGoJog = null; }
    public function hasTimeToGoJog() { return $this->timeToGoJog !== null; }
    public function getTimeToGoJog() { if($this->timeToGoJog !== null) return $this->timeToGoJog; else return null;}
    public function setTimeToGoJog(PbDuration $value) { $this->timeToGoJog = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('activity_goal', $this->activityGoal, 0)
           . Protobuf::toString('achieved_activity', $this->achievedActivity, 0)
           . Protobuf::toString('time_to_go_up', $this->timeToGoUp, null)
           . Protobuf::toString('time_to_go_walk', $this->timeToGoWalk, null)
           . Protobuf::toString('time_to_go_jog', $this->timeToGoJog, null);
    }

    // @@protoc_insertion_point(class_scope:data.PbActivityGoalSummary)
  }

  // message data.PbActivityClassTimes
  final class PbActivityClassTimes extends ProtobufMessage {

    private $_unknown;
    private $timeNonWear = null; // required .PbDuration time_non_wear = 1
    private $timeSleep = null; // required .PbDuration time_sleep = 2
    private $timeSedentary = null; // required .PbDuration time_sedentary = 3
    private $timeLightActivity = null; // required .PbDuration time_light_activity = 4
    private $timeContinuousModerate = null; // required .PbDuration time_continuous_moderate = 5
    private $timeIntermittentModerate = null; // required .PbDuration time_intermittent_moderate = 6
    private $timeContinuousVigorous = null; // required .PbDuration time_continuous_vigorous = 7
    private $timeIntermittentVigorous = null; // required .PbDuration time_intermittent_vigorous = 8

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = \ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // required .PbDuration time_non_wear = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeNonWear = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 2: // required .PbDuration time_sleep = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeSleep = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 3: // required .PbDuration time_sedentary = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeSedentary = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 4: // required .PbDuration time_light_activity = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeLightActivity = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 5: // required .PbDuration time_continuous_moderate = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeContinuousModerate = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 6: // required .PbDuration time_intermittent_moderate = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeIntermittentModerate = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 7: // required .PbDuration time_continuous_vigorous = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeContinuousVigorous = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          case 8: // required .PbDuration time_intermittent_vigorous = 8
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->timeIntermittentVigorous = new \PbDuration($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDuration did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
      if (!$this->validate()) throw new \Exception('Required fields are missing');
    }

    public function write($fp) {
      if (!$this->validate())
        throw new \Exception('Required fields are missing');
      if (!is_null($this->timeNonWear)) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $this->timeNonWear->size());
        $this->timeNonWear->write($fp);
      }
      if (!is_null($this->timeSleep)) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, $this->timeSleep->size());
        $this->timeSleep->write($fp);
      }
      if (!is_null($this->timeSedentary)) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->timeSedentary->size());
        $this->timeSedentary->write($fp);
      }
      if (!is_null($this->timeLightActivity)) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, $this->timeLightActivity->size());
        $this->timeLightActivity->write($fp);
      }
      if (!is_null($this->timeContinuousModerate)) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, $this->timeContinuousModerate->size());
        $this->timeContinuousModerate->write($fp);
      }
      if (!is_null($this->timeIntermittentModerate)) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $this->timeIntermittentModerate->size());
        $this->timeIntermittentModerate->write($fp);
      }
      if (!is_null($this->timeContinuousVigorous)) {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, $this->timeContinuousVigorous->size());
        $this->timeContinuousVigorous->write($fp);
      }
      if (!is_null($this->timeIntermittentVigorous)) {
        fwrite($fp, "B", 1);
        Protobuf::write_varint($fp, $this->timeIntermittentVigorous->size());
        $this->timeIntermittentVigorous->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if (!is_null($this->timeNonWear)) {
        $l = $this->timeNonWear->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeSleep)) {
        $l = $this->timeSleep->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeSedentary)) {
        $l = $this->timeSedentary->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeLightActivity)) {
        $l = $this->timeLightActivity->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeContinuousModerate)) {
        $l = $this->timeContinuousModerate->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeIntermittentModerate)) {
        $l = $this->timeIntermittentModerate->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeContinuousVigorous)) {
        $l = $this->timeContinuousVigorous->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->timeIntermittentVigorous)) {
        $l = $this->timeIntermittentVigorous->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function validate() {
      if ($this->timeNonWear === null) return false;
      if ($this->timeSleep === null) return false;
      if ($this->timeSedentary === null) return false;
      if ($this->timeLightActivity === null) return false;
      if ($this->timeContinuousModerate === null) return false;
      if ($this->timeIntermittentModerate === null) return false;
      if ($this->timeContinuousVigorous === null) return false;
      if ($this->timeIntermittentVigorous === null) return false;
      return true;
    }

    public function clearTimeNonWear() { $this->timeNonWear = null; }
    public function hasTimeNonWear() { return $this->timeNonWear !== null; }
    public function getTimeNonWear() { if($this->timeNonWear !== null) return $this->timeNonWear; else return null;}
    public function setTimeNonWear(PbDuration $value) { $this->timeNonWear = $value; }

    public function clearTimeSleep() { $this->timeSleep = null; }
    public function hasTimeSleep() { return $this->timeSleep !== null; }
    public function getTimeSleep() { if($this->timeSleep !== null) return $this->timeSleep; else return null;}
    public function setTimeSleep(PbDuration $value) { $this->timeSleep = $value; }

    public function clearTimeSedentary() { $this->timeSedentary = null; }
    public function hasTimeSedentary() { return $this->timeSedentary !== null; }
    public function getTimeSedentary() { if($this->timeSedentary !== null) return $this->timeSedentary; else return null;}
    public function setTimeSedentary(PbDuration $value) { $this->timeSedentary = $value; }

    public function clearTimeLightActivity() { $this->timeLightActivity = null; }
    public function hasTimeLightActivity() { return $this->timeLightActivity !== null; }
    public function getTimeLightActivity() { if($this->timeLightActivity !== null) return $this->timeLightActivity; else return null;}
    public function setTimeLightActivity(PbDuration $value) { $this->timeLightActivity = $value; }

    public function clearTimeContinuousModerate() { $this->timeContinuousModerate = null; }
    public function hasTimeContinuousModerate() { return $this->timeContinuousModerate !== null; }
    public function getTimeContinuousModerate() { if($this->timeContinuousModerate !== null) return $this->timeContinuousModerate; else return null;}
    public function setTimeContinuousModerate(PbDuration $value) { $this->timeContinuousModerate = $value; }

    public function clearTimeIntermittentModerate() { $this->timeIntermittentModerate = null; }
    public function hasTimeIntermittentModerate() { return $this->timeIntermittentModerate !== null; }
    public function getTimeIntermittentModerate() { if($this->timeIntermittentModerate !== null) return $this->timeIntermittentModerate; else return null;}
    public function setTimeIntermittentModerate(PbDuration $value) { $this->timeIntermittentModerate = $value; }

    public function clearTimeContinuousVigorous() { $this->timeContinuousVigorous = null; }
    public function hasTimeContinuousVigorous() { return $this->timeContinuousVigorous !== null; }
    public function getTimeContinuousVigorous() { if($this->timeContinuousVigorous !== null) return $this->timeContinuousVigorous; else return null;}
    public function setTimeContinuousVigorous(PbDuration $value) { $this->timeContinuousVigorous = $value; }

    public function clearTimeIntermittentVigorous() { $this->timeIntermittentVigorous = null; }
    public function hasTimeIntermittentVigorous() { return $this->timeIntermittentVigorous !== null; }
    public function getTimeIntermittentVigorous() { if($this->timeIntermittentVigorous !== null) return $this->timeIntermittentVigorous; else return null;}
    public function setTimeIntermittentVigorous(PbDuration $value) { $this->timeIntermittentVigorous = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('time_non_wear', $this->timeNonWear, null)
           . Protobuf::toString('time_sleep', $this->timeSleep, null)
           . Protobuf::toString('time_sedentary', $this->timeSedentary, null)
           . Protobuf::toString('time_light_activity', $this->timeLightActivity, null)
           . Protobuf::toString('time_continuous_moderate', $this->timeContinuousModerate, null)
           . Protobuf::toString('time_intermittent_moderate', $this->timeIntermittentModerate, null)
           . Protobuf::toString('time_continuous_vigorous', $this->timeContinuousVigorous, null)
           . Protobuf::toString('time_intermittent_vigorous', $this->timeIntermittentVigorous, null);
    }

    // @@protoc_insertion_point(class_scope:data.PbActivityClassTimes)
  }

  // message data.PbDailySummary
  final class PbDailySummary extends ProtobufMessage {

    private $_unknown;
    private $date = null; // required .PbDate date = 1
    private $steps = null; // optional uint32 steps = 2
    private $activityCalories = null; // optional uint32 activity_calories = 3
    private $trainingCalories = null; // optional uint32 training_calories = 4
    private $bmrCalories = null; // optional uint32 bmr_calories = 5
    private $activityGoalSummary = null; // optional .data.PbActivityGoalSummary activity_goal_summary = 6
    private $activityClassTimes = null; // optional .data.PbActivityClassTimes activity_class_times = 7
    private $activityDistance = null; // optional float activity_distance = 8

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = \ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // required .PbDate date = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->date = new \PbDate($fp, $len);
            if ($len !== 0) throw new \Exception('new PbDate did not read the full length');

            break;
          case 2: // optional uint32 steps = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT32 || $tmp > Protobuf::MAX_UINT32) throw new \Exception('uint32 out of range');$this->steps = $tmp;

            break;
          case 3: // optional uint32 activity_calories = 3
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT32 || $tmp > Protobuf::MAX_UINT32) throw new \Exception('uint32 out of range');$this->activityCalories = $tmp;

            break;
          case 4: // optional uint32 training_calories = 4
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT32 || $tmp > Protobuf::MAX_UINT32) throw new \Exception('uint32 out of range');$this->trainingCalories = $tmp;

            break;
          case 5: // optional uint32 bmr_calories = 5
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT32 || $tmp > Protobuf::MAX_UINT32) throw new \Exception('uint32 out of range');$this->bmrCalories = $tmp;

            break;
          case 6: // optional .data.PbActivityGoalSummary activity_goal_summary = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->activityGoalSummary = new \data\PbActivityGoalSummary($fp, $len);
            if ($len !== 0) throw new \Exception('new \data\PbActivityGoalSummary did not read the full length');

            break;
          case 7: // optional .data.PbActivityClassTimes activity_class_times = 7
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->activityClassTimes = new \data\PbActivityClassTimes($fp, $len);
            if ($len !== 0) throw new \Exception('new \data\PbActivityClassTimes did not read the full length');

            break;
          case 8: // optional float activity_distance = 8
            if($wire !== 5) {
              throw new \Exception("Incorrect wire format for field $field, expected: 5 got: $wire");
            }
            $tmp = Protobuf::read_float($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_float returned false');
            $this->activityDistance = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
      if (!$this->validate()) throw new \Exception('Required fields are missing');
    }

    public function write($fp) {
      if (!$this->validate())
        throw new \Exception('Required fields are missing');
      if (!is_null($this->date)) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $this->date->size());
        $this->date->write($fp);
      }
      if (!is_null($this->steps)) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->steps);
      }
      if (!is_null($this->activityCalories)) {
        fwrite($fp, "\x18", 1);
        Protobuf::write_varint($fp, $this->activityCalories);
      }
      if (!is_null($this->trainingCalories)) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->trainingCalories);
      }
      if (!is_null($this->bmrCalories)) {
        fwrite($fp, "(", 1);
        Protobuf::write_varint($fp, $this->bmrCalories);
      }
      if (!is_null($this->activityGoalSummary)) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, $this->activityGoalSummary->size());
        $this->activityGoalSummary->write($fp);
      }
      if (!is_null($this->activityClassTimes)) {
        fwrite($fp, ":", 1);
        Protobuf::write_varint($fp, $this->activityClassTimes->size());
        $this->activityClassTimes->write($fp);
      }
      if (!is_null($this->activityDistance)) {
        fwrite($fp, "E", 1);
        Protobuf::write_float($fp, $this->activityDistance);
      }
    }

    public function size() {
      $size = 0;
      if (!is_null($this->date)) {
        $l = $this->date->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->steps)) {
        $size += 1 + Protobuf::size_varint($this->steps);
      }
      if (!is_null($this->activityCalories)) {
        $size += 1 + Protobuf::size_varint($this->activityCalories);
      }
      if (!is_null($this->trainingCalories)) {
        $size += 1 + Protobuf::size_varint($this->trainingCalories);
      }
      if (!is_null($this->bmrCalories)) {
        $size += 1 + Protobuf::size_varint($this->bmrCalories);
      }
      if (!is_null($this->activityGoalSummary)) {
        $l = $this->activityGoalSummary->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->activityClassTimes)) {
        $l = $this->activityClassTimes->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->activityDistance)) {
        $size += 5;
      }
      return $size;
    }

    public function validate() {
      if ($this->date === null) return false;
      return true;
    }

    public function clearDate() { $this->date = null; }
    public function hasDate() { return $this->date !== null; }
    public function getDate() { if($this->date !== null) return $this->date; else return null;}
    public function setDate(PbDate $value) { $this->date = $value; }

    public function clearSteps() { $this->steps = null; }
    public function hasSteps() { return $this->steps !== null; }
    public function getSteps() { if($this->steps !== null) return $this->steps; else return 0;}
    public function setSteps($value) { $this->steps = $value; }

    public function clearActivityCalories() { $this->activityCalories = null; }
    public function hasActivityCalories() { return $this->activityCalories !== null; }
    public function getActivityCalories() { if($this->activityCalories !== null) return $this->activityCalories; else return 0;}
    public function setActivityCalories($value) { $this->activityCalories = $value; }

    public function clearTrainingCalories() { $this->trainingCalories = null; }
    public function hasTrainingCalories() { return $this->trainingCalories !== null; }
    public function getTrainingCalories() { if($this->trainingCalories !== null) return $this->trainingCalories; else return 0;}
    public function setTrainingCalories($value) { $this->trainingCalories = $value; }

    public function clearBmrCalories() { $this->bmrCalories = null; }
    public function hasBmrCalories() { return $this->bmrCalories !== null; }
    public function getBmrCalories() { if($this->bmrCalories !== null) return $this->bmrCalories; else return 0;}
    public function setBmrCalories($value) { $this->bmrCalories = $value; }

    public function clearActivityGoalSummary() { $this->activityGoalSummary = null; }
    public function hasActivityGoalSummary() { return $this->activityGoalSummary !== null; }
    public function getActivityGoalSummary() { if($this->activityGoalSummary !== null) return $this->activityGoalSummary; else return null;}
    public function setActivityGoalSummary(\data\PbActivityGoalSummary $value) { $this->activityGoalSummary = $value; }

    public function clearActivityClassTimes() { $this->activityClassTimes = null; }
    public function hasActivityClassTimes() { return $this->activityClassTimes !== null; }
    public function getActivityClassTimes() { if($this->activityClassTimes !== null) return $this->activityClassTimes; else return null;}
    public function setActivityClassTimes(\data\PbActivityClassTimes $value) { $this->activityClassTimes = $value; }

    public function clearActivityDistance() { $this->activityDistance = null; }
    public function hasActivityDistance() { return $this->activityDistance !== null; }
    public function getActivityDistance() { if($this->activityDistance !== null) return $this->activityDistance; else return 0;}
    public function setActivityDistance($value) { $this->activityDistance = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('date', $this->date, null)
           . Protobuf::toString('steps', $this->steps, 0)
           . Protobuf::toString('activity_calories', $this->activityCalories, 0)
           . Protobuf::toString('training_calories', $this->trainingCalories, 0)
           . Protobuf::toString('bmr_calories', $this->bmrCalories, 0)
           . Protobuf::toString('activity_goal_summary', $this->activityGoalSummary, null)
           . Protobuf::toString('activity_class_times', $this->activityClassTimes, null)
           . Protobuf::toString('activity_distance', $this->activityDistance, 0);
    }

    // @@protoc_insertion_point(class_scope:data.PbDailySummary)
  }

}