<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('syncinfo.proto.php');

namespace data {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufMessage;

  require_once('types.proto.php');

  // message data.PbSyncInfo
  final class PbSyncInfo extends ProtobufMessage {

    private $_unknown;
    private $lastModified = null; // required .PbSystemDateTime last_modified = 1
    private $changedPath = array(); // repeated string changed_path = 2
    private $lastSynchronized = null; // optional .PbSystemDateTime last_synchronized = 3
    private $fullSyncRequired = null; // optional bool full_sync_required = 4 [default = true]

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = \ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // required .PbSystemDateTime last_modified = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->lastModified = new \PbSystemDateTime($fp, $len);
            if ($len !== 0) throw new \Exception('new PbSystemDateTime did not read the full length');

            break;
          case 2: // repeated string changed_path = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->changedPath[] = $tmp;

            break;
          case 3: // optional .PbSystemDateTime last_synchronized = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->lastSynchronized = new PbSystemDateTime($fp, $len);
            if ($len !== 0) throw new \Exception('new PbSystemDateTime did not read the full length');

            break;
          case 4: // optional bool full_sync_required = 4 [default = true]
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->fullSyncRequired = ($tmp > 0) ? true : false;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
      if (!$this->validate()) throw new \Exception('Required fields are missing');
    }

    public function write($fp) {
      if (!$this->validate())
        throw new \Exception('Required fields are missing');
      if (!is_null($this->lastModified)) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, $this->lastModified->size());
        $this->lastModified->write($fp);
      }
      foreach($this->changedPath as $v) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($v));
        fwrite($fp, $v);
      }
      if (!is_null($this->lastSynchronized)) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->lastSynchronized->size());
        $this->lastSynchronized->write($fp);
      }
      if (!is_null($this->fullSyncRequired)) {
        fwrite($fp, " ", 1);
        Protobuf::write_varint($fp, $this->fullSyncRequired ? 1 : 0);
      }
    }

    public function size() {
      $size = 0;
      if (!is_null($this->lastModified)) {
        $l = $this->lastModified->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      foreach($this->changedPath as $v) {
        $l = strlen($v);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->lastSynchronized)) {
        $l = $this->lastSynchronized->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->fullSyncRequired)) {
        $size += 2;
      }
      return $size;
    }

    public function validate() {
      if ($this->lastModified === null) return false;
      return true;
    }

    public function clearLastModified() { $this->lastModified = null; }
    public function hasLastModified() { return $this->lastModified !== null; }
    public function getLastModified() { if($this->lastModified !== null) return $this->lastModified; else return null;}
    public function setLastModified(PbSystemDateTime $value) { $this->lastModified = $value; }

    public function clearChangedPath() { $this->changedPath = array(); }
    public function getChangedPathCount() { return count($this->changedPath); }
    public function getChangedPath($index) { return $this->changedPath[$index]; }
    public function getChangedPathArray() { return $this->changedPath; }
    public function setChangedPath($index, array $value) {$this->changedPath[$index] = $value; }
    public function addChangedPath(array $value) { $this->changedPath[] = $value; }
    public function addAllChangedPath(array $values) { foreach($values as $value) {$this->changedPath[] = $value; }}

    public function clearLastSynchronized() { $this->lastSynchronized = null; }
    public function hasLastSynchronized() { return $this->lastSynchronized !== null; }
    public function getLastSynchronized() { if($this->lastSynchronized !== null) return $this->lastSynchronized; else return null;}
    public function setLastSynchronized(PbSystemDateTime $value) { $this->lastSynchronized = $value; }

    public function clearFullSyncRequired() { $this->fullSyncRequired = null; }
    public function hasFullSyncRequired() { return $this->fullSyncRequired !== null; }
    public function getFullSyncRequired() { if($this->fullSyncRequired !== null) return $this->fullSyncRequired; else return true;}
    public function setFullSyncRequired($value) { $this->fullSyncRequired = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('last_modified', $this->lastModified, null)
           . Protobuf::toString('changed_path', $this->changedPath, "")
           . Protobuf::toString('last_synchronized', $this->lastSynchronized, null)
           . Protobuf::toString('full_sync_required', $this->fullSyncRequired, true);
    }

    // @@protoc_insertion_point(class_scope:data.PbSyncInfo)
  }

}