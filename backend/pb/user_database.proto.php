<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('user_database.proto.php');

namespace data {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufMessage;

  // message data.PbUserDb
  final class PbUserDb extends ProtobufMessage {

    private $_unknown;
    private $currentUserIndex = null; // required uint32 current_user_index = 1

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = \ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // required uint32 current_user_index = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT32 || $tmp > Protobuf::MAX_UINT32) throw new \Exception('uint32 out of range');$this->currentUserIndex = $tmp;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
      if (!$this->validate()) throw new \Exception('Required fields are missing');
    }

    public function write($fp) {
      if (!$this->validate())
        throw new \Exception('Required fields are missing');
      if (!is_null($this->currentUserIndex)) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->currentUserIndex);
      }
    }

    public function size() {
      $size = 0;
      if (!is_null($this->currentUserIndex)) {
        $size += 1 + Protobuf::size_varint($this->currentUserIndex);
      }
      return $size;
    }

    public function validate() {
      if ($this->currentUserIndex === null) return false;
      return true;
    }

    public function clearCurrentUserIndex() { $this->currentUserIndex = null; }
    public function hasCurrentUserIndex() { return $this->currentUserIndex !== null; }
    public function getCurrentUserIndex() { if($this->currentUserIndex !== null) return $this->currentUserIndex; else return 0;}
    public function setCurrentUserIndex($value) { $this->currentUserIndex = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('current_user_index', $this->currentUserIndex, 0);
    }

    // @@protoc_insertion_point(class_scope:data.PbUserDb)
  }

}