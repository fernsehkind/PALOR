<?php
// Generated by https://github.com/bramp/protoc-gen-php// Please include protocolbuffers before this file, for example:
//   require('protocolbuffers.inc.php');
//   require('user_id.proto.php');

namespace data {

  use Protobuf;
  use ProtobufEnum;
  use ProtobufMessage;

  require_once('types.proto.php');

  // message data.PbPasswordToken
  final class PbPasswordToken extends ProtobufMessage {

    private $_unknown;
    private $token = null; // required bytes token = 1
    private $encrypted = null; // required bool encrypted = 2

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = \ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // required bytes token = 1
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->token = $tmp;

            break;
          case 2: // required bool encrypted = 2
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            $this->encrypted = ($tmp > 0) ? true : false;

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
      if (!$this->validate()) throw new \Exception('Required fields are missing');
    }

    public function write($fp) {
      if (!$this->validate())
        throw new \Exception('Required fields are missing');
      if (!is_null($this->token)) {
        fwrite($fp, "\x0a", 1);
        Protobuf::write_varint($fp, strlen($this->token));
        fwrite($fp, $this->token);
      }
      if (!is_null($this->encrypted)) {
        fwrite($fp, "\x10", 1);
        Protobuf::write_varint($fp, $this->encrypted ? 1 : 0);
      }
    }

    public function size() {
      $size = 0;
      if (!is_null($this->token)) {
        $l = strlen($this->token);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->encrypted)) {
        $size += 2;
      }
      return $size;
    }

    public function validate() {
      if ($this->token === null) return false;
      if ($this->encrypted === null) return false;
      return true;
    }

    public function clearToken() { $this->token = null; }
    public function hasToken() { return $this->token !== null; }
    public function getToken() { if($this->token !== null) return $this->token; else return "";}
    public function setToken($value) { $this->token = $value; }

    public function clearEncrypted() { $this->encrypted = null; }
    public function hasEncrypted() { return $this->encrypted !== null; }
    public function getEncrypted() { if($this->encrypted !== null) return $this->encrypted; else return false;}
    public function setEncrypted($value) { $this->encrypted = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('token', $this->token, "")
           . Protobuf::toString('encrypted', $this->encrypted, false);
    }

    // @@protoc_insertion_point(class_scope:data.PbPasswordToken)
  }

  // message data.PbUserIdentifier
  final class PbUserIdentifier extends ProtobufMessage {

    private $_unknown;
    private $masterIdentifier = null; // optional uint64 master_identifier = 1
    private $email = null; // optional string email = 2
    private $passwordToken = null; // optional .data.PbPasswordToken password_token = 3
    private $nickname = null; // optional string nickname = 4
    private $firstName = null; // optional string first_name = 5
    private $lastName = null; // optional string last_name = 6
    private $userIdLastModified = null; // optional .PbSystemDateTime user_id_last_modified = 100

    public function __construct($in = null, &$limit = PHP_INT_MAX) {
      parent::__construct($in, $limit);
    }

    public function read($fp, &$limit = PHP_INT_MAX) {
      $fp = \ProtobufIO::toStream($fp, $limit);
      while(!feof($fp) && $limit > 0) {
        $tag = Protobuf::read_varint($fp, $limit);
        if ($tag === false) break;
        $wire  = $tag & 0x07;
        $field = $tag >> 3;
        switch($field) {
          case 1: // optional uint64 master_identifier = 1
            if($wire !== 0) {
              throw new \Exception("Incorrect wire format for field $field, expected: 0 got: $wire");
            }
            $tmp = Protobuf::read_varint($fp, $limit);
            if ($tmp === false) throw new \Exception('Protobuf::read_varint returned false');
            if ($tmp < Protobuf::MIN_UINT64 || $tmp > Protobuf::MAX_UINT64) throw new \Exception('uint64 out of range');$this->masterIdentifier = $tmp;

            break;
          case 2: // optional string email = 2
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->email = $tmp;

            break;
          case 3: // optional .data.PbPasswordToken password_token = 3
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->passwordToken = new \data\PbPasswordToken($fp, $len);
            if ($len !== 0) throw new \Exception('new \data\PbPasswordToken did not read the full length');

            break;
          case 4: // optional string nickname = 4
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->nickname = $tmp;

            break;
          case 5: // optional string first_name = 5
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->firstName = $tmp;

            break;
          case 6: // optional string last_name = 6
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $tmp = Protobuf::read_bytes($fp, $len, $limit);
            if ($tmp === false) throw new \Exception("read_bytes($len) returned false");
            $this->lastName = $tmp;

            break;
          case 100: // optional .PbSystemDateTime user_id_last_modified = 100
            if($wire !== 2) {
              throw new \Exception("Incorrect wire format for field $field, expected: 2 got: $wire");
            }
            $len = Protobuf::read_varint($fp, $limit);
            if ($len === false) throw new \Exception('Protobuf::read_varint returned false');
            $limit -= $len;
            $this->userIdLastModified = new \PbSystemDateTime($fp, $len);
            if ($len !== 0) throw new \Exception('new PbSystemDateTime did not read the full length');

            break;
          default:
            $limit -= Protobuf::skip_field($fp, $wire);
        }
      }
      if (!$this->validate()) throw new \Exception('Required fields are missing');
    }

    public function write($fp) {
      if (!$this->validate())
        throw new \Exception('Required fields are missing');
      if (!is_null($this->masterIdentifier)) {
        fwrite($fp, "\x08", 1);
        Protobuf::write_varint($fp, $this->masterIdentifier);
      }
      if (!is_null($this->email)) {
        fwrite($fp, "\x12", 1);
        Protobuf::write_varint($fp, strlen($this->email));
        fwrite($fp, $this->email);
      }
      if (!is_null($this->passwordToken)) {
        fwrite($fp, "\x1a", 1);
        Protobuf::write_varint($fp, $this->passwordToken->size());
        $this->passwordToken->write($fp);
      }
      if (!is_null($this->nickname)) {
        fwrite($fp, "\"", 1);
        Protobuf::write_varint($fp, strlen($this->nickname));
        fwrite($fp, $this->nickname);
      }
      if (!is_null($this->firstName)) {
        fwrite($fp, "*", 1);
        Protobuf::write_varint($fp, strlen($this->firstName));
        fwrite($fp, $this->firstName);
      }
      if (!is_null($this->lastName)) {
        fwrite($fp, "2", 1);
        Protobuf::write_varint($fp, strlen($this->lastName));
        fwrite($fp, $this->lastName);
      }
      if (!is_null($this->userIdLastModified)) {
        fwrite($fp, "\xa2\x06", 2);
        Protobuf::write_varint($fp, $this->userIdLastModified->size());
        $this->userIdLastModified->write($fp);
      }
    }

    public function size() {
      $size = 0;
      if (!is_null($this->masterIdentifier)) {
        $size += 1 + Protobuf::size_varint($this->masterIdentifier);
      }
      if (!is_null($this->email)) {
        $l = strlen($this->email);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->passwordToken)) {
        $l = $this->passwordToken->size();
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->nickname)) {
        $l = strlen($this->nickname);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->firstName)) {
        $l = strlen($this->firstName);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->lastName)) {
        $l = strlen($this->lastName);
        $size += 1 + Protobuf::size_varint($l) + $l;
      }
      if (!is_null($this->userIdLastModified)) {
        $l = $this->userIdLastModified->size();
        $size += 2 + Protobuf::size_varint($l) + $l;
      }
      return $size;
    }

    public function validate() {
      return true;
    }

    public function clearMasterIdentifier() { $this->masterIdentifier = null; }
    public function hasMasterIdentifier() { return $this->masterIdentifier !== null; }
    public function getMasterIdentifier() { if($this->masterIdentifier !== null) return $this->masterIdentifier; else return 0;}
    public function setMasterIdentifier($value) { $this->masterIdentifier = $value; }

    public function clearEmail() { $this->email = null; }
    public function hasEmail() { return $this->email !== null; }
    public function getEmail() { if($this->email !== null) return $this->email; else return "";}
    public function setEmail($value) { $this->email = $value; }

    public function clearPasswordToken() { $this->passwordToken = null; }
    public function hasPasswordToken() { return $this->passwordToken !== null; }
    public function getPasswordToken() { if($this->passwordToken !== null) return $this->passwordToken; else return null;}
    public function setPasswordToken(\data\PbPasswordToken $value) { $this->passwordToken = $value; }

    public function clearNickname() { $this->nickname = null; }
    public function hasNickname() { return $this->nickname !== null; }
    public function getNickname() { if($this->nickname !== null) return $this->nickname; else return "";}
    public function setNickname($value) { $this->nickname = $value; }

    public function clearFirstName() { $this->firstName = null; }
    public function hasFirstName() { return $this->firstName !== null; }
    public function getFirstName() { if($this->firstName !== null) return $this->firstName; else return "";}
    public function setFirstName($value) { $this->firstName = $value; }

    public function clearLastName() { $this->lastName = null; }
    public function hasLastName() { return $this->lastName !== null; }
    public function getLastName() { if($this->lastName !== null) return $this->lastName; else return "";}
    public function setLastName($value) { $this->lastName = $value; }

    public function clearUserIdLastModified() { $this->userIdLastModified = null; }
    public function hasUserIdLastModified() { return $this->userIdLastModified !== null; }
    public function getUserIdLastModified() { if($this->userIdLastModified !== null) return $this->userIdLastModified; else return null;}
    public function setUserIdLastModified(PbSystemDateTime $value) { $this->userIdLastModified = $value; }

    public function __toString() {
      return ''
           . Protobuf::toString('master_identifier', $this->masterIdentifier, 0)
           . Protobuf::toString('email', $this->email, "")
           . Protobuf::toString('password_token', $this->passwordToken, null)
           . Protobuf::toString('nickname', $this->nickname, "")
           . Protobuf::toString('first_name', $this->firstName, "")
           . Protobuf::toString('last_name', $this->lastName, "")
           . Protobuf::toString('user_id_last_modified', $this->userIdLastModified, null);
    }

    // @@protoc_insertion_point(class_scope:data.PbUserIdentifier)
  }

}